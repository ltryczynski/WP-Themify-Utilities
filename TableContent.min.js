class TableContent { constructor({ contentContainer: t, tableContentContainer: e, instantRender: n = !0, topBar: a = !1, topBarText: o = "Table of Content", topBarTextTagName: i = "p", topBarHideText: l = "Hide", topBarShowText: s = "Show", topBarStyle: r = !0 }) { this.contentContainer = t, this.tableContentContainer = e, this.headingItems = this.getHeadingsFromContent(), this.topBar = { topBarText: o, topBarTextTagName: i, topBarHideText: l, topBarShowText: s, topBarStyle: r, topBarState: !1 }, n && this.render(), a && (this.topBarElement = this.createTopBar(), this.tableContentContainer.prepend(this.topBarElement)) } getHeadingsFromContent() { let { contentContainer: t } = this, e = t.querySelectorAll("h2, h3"); return Array.from(e).map((t, e) => (t.id || (t.id = "heading-" + e), { tagName: t.tagName, textContent: t.textContent, id: t.id })) } createTableContentItem(t) { let e = document.createElement("li"), n = document.createElement("a"); return n.href = `#${t.id}`, n.textContent = t.textContent, e.appendChild(n), e } createTableContentNestedItem(t) { let e = document.createElement("ul"); return e.classList.add("table-content-list"), e.appendChild(t), e } createTableContent() { let { tableContentContainer: t, headingItems: e, createTableContentItem: n, createTableContentNestedItem: a } = this, o = document.createElement("ul"); o.classList.add("table-content-list"); let i = null; for (let l = 0; l < e.length; l++) { let s = n(e[l]); if ("H2" === e[l].tagName) o.appendChild(s); else if ("H3" === e[l].tagName && i) { if ("H2" === e[l - 1].tagName) { let r = a(s); i.appendChild(r), i = r } else i.appendChild(s) } l < e.length - 1 && "H2" === e[l].tagName && "H3" === e[l + 1].tagName && (i = s) } return t.appendChild(o), o } createTopBar() { let { topBarText: t, topBarTextTagName: e, topBarHideText: n, topBarShowText: a, topBarStyle: o } = this.topBar, i = document.createElement("div"), l = document.createElement(e), s = document.createElement("button"); return i.classList.add("table-content__top-bar"), l.textContent = t, s.textContent = a, i.appendChild(l), i.appendChild(s), this.tableContentList.classList.add("table-content-hidden"), this.tableContentList.style.display = "none", o && document.head.appendChild(this.createTopBarStyle()), s.addEventListener("click", () => { this.topBar.topBarState ? (console.log("hide"), this.tableContentList.classList.remove("table-content-visible"), this.tableContentList.classList.add("table-content-hidden"), requestAnimationFrame(() => { this.tableContentList.style.display = "none" }), s.textContent = a) : (console.log("show"), this.tableContentList.classList.remove("table-content-hidden"), this.tableContentList.classList.add("table-content-visible"), s.textContent = n, requestAnimationFrame(() => { this.tableContentList.style.display = "block" })), this.topBar.topBarState = !this.topBar.topBarState }), i } createTopBarStyle() { let t = document.createElement("style"); return t.textContent = `#${this.tableContentContainer.id} .table-content__top-bar button {background-color: transparent;outline: 0;border: 0;color: #fff;cursor: pointer;margin-left: 1rem;}.table-content-hidden {height: 0;overflow: hidden;transform: scaleY(0);transition: 0.3s;transform-origin: top;}.table-content-visible {height: auto;transform: scaleY(1);transform-origin: top;transition: 0.3s;}#${this.tableContentContainer.id} .table-content__top-bar {display: flex;justify-content: space-between;align-items: center;width: 100%;}#${this.tableContentContainer.id} .table-content__top-bar * {margin: 0;}`, t } render() { this.headingItems.length && (this.tableContentList = this.createTableContent()) } }
const tableContent = new TableContent({ tableContentContainer: document.querySelector("#table-content"), contentContainer: document.querySelector(".content"), topBar: !0 });