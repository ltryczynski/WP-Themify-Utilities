class TableContent { constructor({ contentContainer: e, tableContentContainer: t, instantRender: n = !0 }) { this.contentContainer = e, this.tableContentContainer = t, this.headingItems = this.getHeadingsFromContent(), n && this.render() } getHeadingsFromContent() { let { contentContainer: e } = this, t = e.querySelectorAll("h2, h3"); return Array.from(t).map((e, t) => (e.id || (e.id = "heading-" + t), { tagName: e.tagName, textContent: e.textContent, id: e.id })) } createTableContentItem(e) { let t = document.createElement("li"), n = document.createElement("a"); return n.href = `#${e.id}`, n.textContent = e.textContent, t.appendChild(n), t } createTableContentNestedItem(e) { let t = document.createElement("ul"); return t.classList.add("table-content-list"), t.appendChild(e), t } createTableContent() { let { tableContentContainer: e, headingItems: t, createTableContentItem: n, createTableContentNestedItem: a } = this, l = document.createElement("ul"); l.classList.add("table-content-list"); let i = null; for (let r = 0; r < t.length; r++) { let o = n(t[r]); if ("H2" === t[r].tagName) l.appendChild(o); else if ("H3" === t[r].tagName && i) { if ("H2" === t[r - 1].tagName) { let d = a(o); i.appendChild(d), i = d } else i.appendChild(o) } r < t.length - 1 && "H2" === t[r].tagName && "H3" === t[r + 1].tagName && (i = o, console.log("parentElement", i)) } return e.appendChild(l) } render() { this.headingItems.length && (this.tableContent = this.createTableContent()) } }
const tableContent = new TableContent({ tableContentContainer: document.querySelector("#table-content"), contentContainer: document.querySelector(".content") });